// <auto-generated />
using System;
using Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20200419114340_AddId")]
    partial class AddId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("author")
                        .HasColumnType("character varying(30)");

                    b.Property<short>("Date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnName("genre")
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Isbn")
                        .HasColumnName("isbn")
                        .HasColumnType("character(13)");

                    b.Property<short>("Pages")
                        .HasColumnName("pages");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnName("publisher")
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.ToTable("book","lib");
                });

            modelBuilder.Entity("Library.Models.Copy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnName("isbn")
                        .HasColumnType("character(13)");

                    b.Property<int?>("Libuser")
                        .HasColumnName("libuser");

                    b.Property<DateTime?>("Return")
                        .HasColumnName("return")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Taken")
                        .HasColumnName("taken")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Libuser");

                    b.ToTable("copy","lib");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Identitycode")
                        .IsRequired()
                        .HasColumnName("identitycode")
                        .HasColumnType("character(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("user","lib");
                });

            modelBuilder.Entity("Library.Models.Copy", b =>
                {
                    b.HasOne("Library.Models.Book", "IsbnNavigation")
                        .WithMany("Copy")
                        .HasForeignKey("Id")
                        .HasConstraintName("tobook")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.User", "LibuserNavigation")
                        .WithMany("Copy")
                        .HasForeignKey("Libuser")
                        .HasConstraintName("touser");
                });
#pragma warning restore 612, 618
        }
    }
}
